int recibirNodoToFSSetBloque(int socketNodo, header_t* header, t_log* logger) {

	t_nro_bloque setBloque;

	log_info(logger, "recibirNodoToFSSetBloque: sizeof(t_nro_bloque): %d %s por el socket [%d]\n",
			sizeof(t_nro_bloque), setDescription(header->tipo), socketNodo);

	if (recibir_struct(socketNodo, &setBloque, sizeof(t_nro_bloque)) != EXITO) {
		log_error(logger,
				"recibirNodoToFSSetBloque: Error al recibir struct setBloque \n\n");
		return ERROR;
	}

	log_info(logger, "recibirNodoToFSSetBloque: bloque solicitado nro: %d por el socket [%d]\n",
			setBloque.nro_bloque, socketNodo);

	int nroBloque = setBloque.nro_bloque;

	char* contenidoBloque = malloc(header->largo_mensaje + 1); //agrego espacio para el \0
	memset(contenidoBloque, '\0', header->largo_mensaje + 1);

	int ret = recibir(socketNodo, contenidoBloque, header->largo_mensaje);

	if (ret != EXITO) {

		log_error(logger,
				"Error recibiendo SET_BLOQUE[nro_bloque: %d] al nodo por el socket [%d] [%s]\n",
				nroBloque, socketNodo, setDescription(header->tipo));

		return ret;
	}

	log_info(logger,
			"recibirNodoToFSSetBloque: INICIO contenido recibido de bloque solicitado nro: %d por el socket [%d]\n",
			setBloque.nro_bloque, socketNodo);
	log_info(logger,
				"%s \n",
				contenidoBloque);
	log_info(logger,
				"recibirNodoToFSSetBloque: FIN contenido recibido de bloque solicitado nro: %d \n",
				setBloque.nro_bloque);

	return EXITO;
}
